// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demosminerva/whiteboard_messages.proto

/**
 * @fileoverview Generated Protocol Buffer code for file demosminerva/whiteboard_messages.proto.
 */

goog.provide('whiteboard.Point');
goog.provide('whiteboard.ClearBoard');

goog.require('goog.proto2.Message');

/**
 * Message Point.
 * @constructor
 * @extends {goog.proto2.Message}
 */
whiteboard.Point = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(whiteboard.Point, goog.proto2.Message);


/**
 * Gets the value of the x field.
 * @return {?number} The value.
 */
whiteboard.Point.prototype.getX = function() {
  return /** @type {?number} */ (this.get$Value(1));
};


/**
 * Gets the value of the x field or the default value if not set.
 * @return {number} The value.
 */
whiteboard.Point.prototype.getXOrDefault = function() {
  return /** @type {number} */ (this.get$ValueOrDefault(1));
};


/**
 * Sets the value of the x field.
 * @param {number} value The value.
 */
whiteboard.Point.prototype.setX = function(value) {
  this.set$Value(1, /** @type {Object} */ (value));
};


/**
 * Returns whether the x field has a value.
 * @return {boolean} true if the field has a value.
 */
whiteboard.Point.prototype.hasX = function() {
  return this.has$Value(1);
};


/**
 * Gets the number of values in the x field.
 * @return {number}
 */
whiteboard.Point.prototype.xCount = function() {
  return this.count$Values(1);
};


/**
 * Clears the values in the x field.
 */
whiteboard.Point.prototype.clearX = function() {
  this.clear$Field(1);
};


/**
 * Gets the value of the y field.
 * @return {?number} The value.
 */
whiteboard.Point.prototype.getY = function() {
  return /** @type {?number} */ (this.get$Value(2));
};


/**
 * Gets the value of the y field or the default value if not set.
 * @return {number} The value.
 */
whiteboard.Point.prototype.getYOrDefault = function() {
  return /** @type {number} */ (this.get$ValueOrDefault(2));
};


/**
 * Sets the value of the y field.
 * @param {number} value The value.
 */
whiteboard.Point.prototype.setY = function(value) {
  this.set$Value(2, /** @type {Object} */ (value));
};


/**
 * Returns whether the y field has a value.
 * @return {boolean} true if the field has a value.
 */
whiteboard.Point.prototype.hasY = function() {
  return this.has$Value(2);
};


/**
 * Gets the number of values in the y field.
 * @return {number}
 */
whiteboard.Point.prototype.yCount = function() {
  return this.count$Values(2);
};


/**
 * Clears the values in the y field.
 */
whiteboard.Point.prototype.clearY = function() {
  this.clear$Field(2);
};


/**
 * Gets the value of the color field.
 * @return {?string} The value.
 */
whiteboard.Point.prototype.getColor = function() {
  return /** @type {?string} */ (this.get$Value(3));
};


/**
 * Gets the value of the color field or the default value if not set.
 * @return {string} The value.
 */
whiteboard.Point.prototype.getColorOrDefault = function() {
  return /** @type {string} */ (this.get$ValueOrDefault(3));
};


/**
 * Sets the value of the color field.
 * @param {string} value The value.
 */
whiteboard.Point.prototype.setColor = function(value) {
  this.set$Value(3, /** @type {Object} */ (value));
};


/**
 * Returns whether the color field has a value.
 * @return {boolean} true if the field has a value.
 */
whiteboard.Point.prototype.hasColor = function() {
  return this.has$Value(3);
};


/**
 * Gets the number of values in the color field.
 * @return {number}
 */
whiteboard.Point.prototype.colorCount = function() {
  return this.count$Values(3);
};


/**
 * Clears the values in the color field.
 */
whiteboard.Point.prototype.clearColor = function() {
  this.clear$Field(3);
};


/**
 * Message ClearBoard.
 * @constructor
 * @extends {goog.proto2.Message}
 */
whiteboard.ClearBoard = function() {
  goog.proto2.Message.apply(this);
};
goog.inherits(whiteboard.ClearBoard, goog.proto2.Message);




goog.proto2.Message.set$Metadata(whiteboard.Point, {
  0 : {
    name: 'Point',
    fullName: 'demosminerva.whiteboard_messages.Point'
  },
  '1' : {
    name: 'x',
    fieldType: goog.proto2.Message.FieldType.INT32,
    type: Number
  },
  '2' : {
    name: 'y',
    fieldType: goog.proto2.Message.FieldType.INT32,
    type: Number
  },
  '3' : {
    name: 'color',
    fieldType: goog.proto2.Message.FieldType.STRING,
    type: String
  }});

goog.proto2.Message.set$Metadata(whiteboard.ClearBoard, {
  0 : {
    name: 'ClearBoard',
    fullName: 'demosminerva.whiteboard_messages.ClearBoard'
  }
  });

